##
# create-github-resources.yaml
# Creates our github resources
##
---
name: Creates Github resources

on:
  push:
    branches:
      - main
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/create-github-resources.yaml'
  workflow_dispatch:
    inputs:
      apply_changes:
        description: 'Actually apply terraform changes (creates real resources)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

# Prevent concurrent runs to avoid terraform state conflicts
concurrency:
  group: terraform-github-resources
  cancel-in-progress: false

jobs:
  create:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      repository-projects: write
      actions: write

    steps:
      - name: Get current time stamp
        run: |
          echo "TIME_STAMP=$(date +'%Y.%m.%d-%H:%M:%S')" >> $GITHUB_ENV
          echo "TAG_PREFIX=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_ENV
          echo "NEW_TAG=$(date +'%Y-%m-%d_%H-%M-%S')_${{ github.run_number }}" >> $GITHUB_ENV

      - name: Job details
        run: |
          echo 'Execution time:         ${{ env.TIME_STAMP }}'
          echo 'Triggered by user:      ${{ github.actor }}'
          echo 'User account ID:        ${{ github.actor_id }}'
          echo 'Workflow run number:    ${{ github.run_number }}'
          echo 'Repository name:        ${{ github.repository }}'
          echo 'Branch name:            ${{ github.ref_name }}'
          echo 'Logs retention:         ${{ github.retention_days }} days'

      - name: Get token
        id: app-token
        continue-on-error: false
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.RENOVATE_APP_ID }}
          private-key: ${{ secrets.RENOVATE_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Check-out the repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          fetch-depth: 0

      - name: Set up OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.10.3

      - name: Pull latest state from repository
        run: |
          git fetch origin main
          git checkout main
          git pull origin main

          if [ -f tfstate/terraform.tfstate ]; then
            echo "State file present"
            echo "TFSTATE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "No state file found"
            echo "TFSTATE_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Show current configuration
        run: |
          echo "Using main terraform.tfvars configuration:"
          cat terraform.tfvars

      - name: Init
        run: tofu init
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Validate
        run: tofu validate
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Run tests
        run: tofu test -verbose
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Plan
        run: |
          echo "Starting terraform plan with timeout..."
          timeout 300 tofu plan -out=tfplan || {
            echo "Plan step timed out or failed"
            echo "This might be due to API rate limiting or authentication issues"
            exit 1
          }
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Apply
        if: github.event.inputs.apply_changes == 'true'
        run: |
          echo "WARNING: This will create real GitHub resources!"
          echo "Applying terraform plan..."
          tofu apply -auto-approve tfplan
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Skip Apply
        if: github.event.inputs.apply_changes != 'true'
        run: |
          echo "Skipping apply step - plan-only mode"
          echo "To actually create resources, re-run with 'apply_changes' set to 'true'"
          echo "This prevents accidental resource creation"

      - name: Show state info
        if: github.event.inputs.apply_changes == 'true'
        run: |
          echo "Terraform apply completed successfully"
          if [ -f tfstate/terraform.tfstate ]; then
            echo "State file size: $(du -h tfstate/terraform.tfstate | cut -f1)"
            echo "Resources in state: $(tofu state list | wc -l)"
          fi

      - name: Commit updated state file
        if: github.event.inputs.apply_changes == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Add the state file
          git add tfstate/terraform.tfstate

          # Check if there are changes to commit
          if git diff --cached --quiet; then
            echo "No changes to terraform state file"
          else
            echo "Committing terraform state file changes"
            git commit -m "Update terraform state [skip ci]"
            git push origin main
          fi



